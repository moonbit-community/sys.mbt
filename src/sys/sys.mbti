package "myfreess/native/sys"

import(
  "moonbitlang/core/buffer"
  "moonbitlang/core/bytes"
  "moonbitlang/core/string"
)

// Values

// Types and methods
pub type CStr Bytes

#external
pub type File
fn File::close(Self) -> Bool
fn[P : AsPath] File::create(P) -> Self?
fn File::metadata(Self) -> Metadata?
fn[P : AsPath] File::open(P) -> Self?
fn File::read_all(Self) -> Bytes?
fn File::symlink_metadata(Self) -> Metadata?
fn File::write_all(Self, Bytes) -> Bool

#external
pub type Metadata
fn Metadata::filesize(Self) -> Int
fn Metadata::is_dir(Self) -> Bool
fn Metadata::is_file(Self) -> Bool
fn Metadata::is_symlink(Self) -> Bool

#external
pub type OpenOptions

pub type OsStr Bytes
fn OsStr::from(@string.StringView) -> Self
impl Add for OsStr
impl AsCStr for OsStr
impl AsPath for OsStr

pub type OsStrBuilder @buffer.T
fn OsStrBuilder::checked_push(Self, @string.StringView) -> Unit
fn OsStrBuilder::from(@string.StringView) -> Self
fn OsStrBuilder::from_osstr(OsStr) -> Self
fn OsStrBuilder::new(size_hint~ : Int = ..) -> Self
fn OsStrBuilder::push(Self, @string.StringView) -> Unit
fn OsStrBuilder::push_char(Self, Char) -> Unit
fn OsStrBuilder::push_osstr(Self, OsStr) -> Unit
fn OsStrBuilder::to_osstr(Self) -> OsStr
impl AsCStr for OsStrBuilder

pub type Path OsStr
fn Path::as_view(Self) -> @bytes.View
fn Path::from(@string.StringView) -> Self
fn Path::join(Self, ArrayView[@string.StringView]) -> Self
fn Path::op_add(Self, Self) -> Self
impl AsCStr for Path
impl AsPath for Path

#external
pub type Permissions

// Type aliases

// Traits
trait AsCStr
impl AsCStr for String
impl AsCStr for @string.StringView

trait AsPath : AsCStr
impl AsPath for String
impl AsPath for @string.StringView

